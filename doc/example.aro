from player import Player

class Sprite:

    public x:Int
    public y:Int
    public rotation:Double
    public texture:Image

class Dude<Sprite>:

    public constant attack:Int
    public constant defense:Int
    public health:Int(0, 255) = 255

    when me.health <= 0:
        animate(me, 'die') then free(me) # `then` indicates sequential operations

class Goomba<Dude>:
    texture = asset('goomba/normal')
    public constant defense = 20 # type inferred from value
    public constant attack = 10
    public attacking = null

    function attack(attacker:Dude, attacked:Dude):
        attacked.health -= attacker.attack
        attacker.health -= attacked.defense

    when player is Player,
         player.attack < me.defense,
         distance(me, player) < 10:
        me.sprite = asset('goomba/attack')
        me.rotation = tan(player.y - me.y / player.x - me.x)
        me.attacking = player

    when me.attacking = player,
         player is Player,
         player is Dude,
         colliding(me, player):
        attack(me, player)
